#!/bin/sh
#
#  anytun
#
#  The secure anycast tunneling protocol (satp) defines a protocol used
#  for communication between any combination of unicast and anycast
#  tunnel endpoints.  It has less protocol overhead than IPSec in Tunnel
#  mode and allows tunneling of every ETHER TYPE protocol (e.g.
#  ethernet, ip, arp ...). satp directly includes cryptography and
#  message authentication based on the methodes used by SRTP.  It is
#  intended to deliver a generic, scaleable and secure solution for
#  tunneling and relaying of packets of any protocol.
#
#
#  Copyright (C) 2007-2009 Othmar Gsenger, Erwin Nindl, 
#                          Christian Pointner <satp@wirdorange.org>
#
#  This file is part of Anytun.
#
#  Anytun is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  any later version.
#
#  Anytun is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with anytun.  If not, see <http://www.gnu.org/licenses/>.
#

TARGET=`uname -s`

EBUILD_COMPAT=0

CXXFLAGS='-g -Wall -O2 -DLOG_SYSLOG -DLOG_FILE -DLOG_STDOUT'
LDFLAGS='-g -Wall -O2 -lboost_thread -lboost_serialization -lboost_system -lboost_date_time'

CRYPTO_LIB='gcrypt'
PASSPHRASE=1
ROUTING=1

PREFIX='/usr/local'
BINDIR=''
SBINDIR=''
ETCDIR=''
MANDIR=''
EXAMPLESDIR=''
INSTALLEXAMPLES=1

print_usage() {
  echo "configure --help                    print this"
  echo "          --target=<TARGET>         build target i.e. Linux (default: autodetect)"
  echo "          --prefix=<PREFIX>         the installation prefix (default: /usr/local)"
  echo "          --bindir=<DIR>            the path to the bin directory (default: $PREFIX/bin)"
  echo "          --sbindir=<DIR>           the path to the sbin directory (default: $PREFIX/sbin)"
  echo "          --sysconfdir=<DIR>        the path to the system configuration directory (default: $PREFIX/etc"
  echo "          --mandir=<DIR>            the path to the system man pages (default: $PREFIX/share/man)"
  echo "          --examplesdir=<DIR>       the path to the examples files (default: $PREFIX/share/examples)"
  echo "          --no-examples             dont't install example files"
  echo "          --use-ssl-crypto          use ssl crypto library instead of libgcrypt"
  echo "          --no-crypto               disable crypto at all (only NULL cipher)"
  echo "          --disable-passphrase      disable master key and salt passphrase"
  echo "          --enable-passphrase       enable master key and salt passphrase"
  echo "          --disable-routing         disable built-in routing capability"
  echo "          --enable-routing          enable built-in routing capability"
}

for arg
do
  case $arg in
  --target=*)
    TARGET=${arg#--target=}
  ;;
  --prefix=*)
    PREFIX=${arg#--prefix=}
  ;;
  --bindir=*)
    SBINDIR=${arg#--bindir=}
  ;;
  --sbindir=*)
    SBINDIR=${arg#--sbindir=}
  ;;
  --sysconfdir=*)
    ETCDIR=${arg#--sysconfdir=}
  ;;
  --mandir=*)
    MANDIR=${arg#--mandir=}
  ;;
  --examplesdir=*)
    EXAMPLESDIR=${arg#--examplesdir=}
  ;;
  --no-examples)
    INSTALLEXAMPLES=0
  ;;
  --use-ssl-crypto)
    CRYPTO_LIB='ssl'
  ;;
  --no-crypto)
    CRYPTO_LIB='none'
  ;; 
  --enable-passphrase)
    PASSPHRASE=1
  ;;
  --disable-passphrase)
    PASSPHRASE=0
  ;;
  --enable-routing)
    ROUTING=1
  ;;
  --disable-routing)
    ROUTING=0
  ;;
  --ebuild-compat)
    EBUILD_COMPAT=1
  ;;
  --help)
    print_usage
    exit 0
  ;;
  *)
    ERRORS="$ERRORS $arg"
  ;;
  esac
done

if [ -n "$ERRORS" ] && [ $EBUILD_COMPAT -ne 1 ]; then
  for error in $ERRORS; do
    echo "Unknown argument: $error"
  done

  print_usage
  exit 1
fi


rm -f include.mk
case $TARGET in 
	Linux)
		rm -rf tunDevice.cpp
		ln -sf linux/tunDevice.cpp 
    echo "loading Linux specific TUN Device"
	;;
	OpenBSD|FreeBSD|NetBSD)
		rm -rf tunDevice.cpp
		ln -sf bsd/tunDevice.cpp 
    echo "loading BSD specific TUN Device"
    CXXFLAGS=$CXXFLAGS' -I/usr/local/include'
    LDFLAGS=$LDFLAGS' -L/usr/local/lib'
	;;
	*)
		echo "Plattform not supported"
    exit 1
	;;
esac

case $CRYPTO_LIB in
  gcrypt)
    LDFLAGS=$LDFLAGS' -lgcrypt -lgpg-error'
    echo "using libgcrypt library"
  ;;
  ssl)
    CXXFLAGS=$CXXFLAGS' -DUSE_SSL_CRYPTO'
    LDFLAGS=$LDFLAGS' -lcrypto'
    echo "using ssl crypto library"
  ;;
  none)
    CXXFLAGS=$CXXFLAGS' -DNO_CRYPT'
    echo "NO_CRYPT_OBJ = 1" >> include.mk
    echo "disabling crypto"
  ;;
esac

if [ $PASSPHRASE -eq 0 ]; then
  CXXFLAGS=$CXXFLAGS' -DNO_PASSPHRASE'
  echo "disabling master key and salt passphrase"
fi

if [ $ROUTING -eq 0 ]; then
  CXXFLAGS=$CXXFLAGS' -DNO_ROUTING'
  echo "disabling built-in routing capability"
fi

if [ -z "$BINDIR" ]; then
  BINDIR=$PREFIX/bin
fi

if [ -z "$SBINDIR" ]; then
  SBINDIR=$PREFIX/sbin
fi

if [ -z "$ETCDIR" ]; then
  ETCDIR=$PREFIX/etc
fi

if [ -z "$MANDIR" ]; then
  MANDIR=$PREFIX/share/man
fi

if [ -z "$EXAMPLESDIR" ]; then
  EXAMPLESDIR=$PREFIX/share/examples
fi

cat >> include.mk <<EOF
# this file was created automatically
# do not edit this file directly 
# use ./configure instead

TARGET = $TARGET
CXX = gcc
CXXFLAGS = $CXXFLAGS
LD = gcc
LDFLAGS = $LDFLAGS
STRIP = strip
INSTALL = install

PREFIX := $PREFIX
BINDIR := $BINDIR
SBINDIR := $SBINDIR
ETCDIR := $ETCDIR
MANDIR := $MANDIR
EOF

if [ $INSTALLEXAMPLES -eq 1 ]; then
  echo "EXAMPLESDIR := $EXAMPLESDIR" >> include.mk
fi

exit 0
