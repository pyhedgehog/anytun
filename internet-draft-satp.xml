<?xml version='1.0'?>
    <!DOCTYPE rfc SYSTEM 'rfcXXXX.dtd' [
    
    <!ENTITY rfc1546 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1546.xml'>
    <!ENTITY rfc3711 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3711.xml'>
    <!ENTITY rfc3068 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3068.xml'>
    <!ENTITY rfc2784 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2784.xml'>
    <!ENTITY rfc2401 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2401.xml'>
]>
    <rfc ipr='full3978' docName='draft-gsenger-secure-anycast-tunneling-protocol-00'>
    <front>
        <title>secure anycast tunneling protocol (satp)</title>

        <author initials='O.G.' surname='Gsenger'
                fullname='Othmar Gsenger'>
            <organization></organization>

            <address>
                <postal>
                    <street>Puerstingerstr 32/7</street>
                    <city>Saalfelden</city>
                    <code>5760</code>
                    <country>AT</country>
                </postal>

                <phone></phone>
                <email>satp@gsenger.com</email>
                <uri>http://www.gsenger.com/satp/</uri>
            </address>
        </author>

        <date month='March' year='2007' />

        <area>General</area>
        <workgroup></workgroup>
        <keyword>satp</keyword>
        <keyword>Internet-Draft</keyword>
        <keyword>secure anycast tunneling protocol</keyword>
        <keyword>anycast</keyword>
        <keyword>tunnel</keyword>
        <keyword>secure</keyword>
        <keyword>protocol</keyword>
        <abstract>
            <t>The secure anycast tunneling protocol (satp) defines a protocol used for communication between any combination of unicast and anycast tunnel endpoints. It allows tunneling of every ETHER TYPE protocol (e.g. ethernet, ip, arp ...). SATP directly includes cryptography and message authentication based on the methodes used by SRTP. It is intended to deliver a generic, scaleable and secure solution for tunneling and relaying of packets of any protocol.
            </t>
        </abstract>
    </front>
    <middle>
    <section title='Introduction'>
        <t>SATP is somehow a mixture of a generic encapsulation protocol like <xref target="RFC2784">GRE</xref> and a secure tunneling protocol as <xref target="RFC2401">IPsec</xref> in tunnel mode. To save some header overhead it uses the encryption technices of <xref target="RFC3711">SRTP</xref>. It supports peer to peer tunnels, where tunnel endpoints can be any combination of unicast, multicast or anycast hosts, so it defines a <xref target="RFC1546">Host Anycast Service</xref></t>
    </section> 
    <section title="Motivation and usage scenarios">
       <t>This section gives an overview of possible usage scenarios. Please note, that the protocols used in the figures are only examples and that SATP itself does not care about either transport protocols or encapsulated protocols. Routing is not done by SATP and each implemetation MAY choose it's own way of doing this task (e.g. using functions provided by the operating system). SATP is used only to encapsulate and encrypt data.</t>
       <section title="Usage scenarions">
    
            <section title='tunneling from unicast hosts over anycast routers to other unicast hosts'>
              <figure anchor="tunnel_mode">
                 <preamble>An example of SATP used to tunnel in a unicast client - anycast server model</preamble>
                 <artwork>
                    --------- router ----------- 
                   /                            \ 
    unicast ------+---------- router ------------+------ unicast
    host           \                            /        host
                    --------- router -----------  

  unicast  | encrypted     |  anycast  | encrypted     |  unicast
  tunnel   | communication |  tunnel   | communication |  tunnel  
  endpoint | using SATP    |  endpoint | using SATP    |  endpoint 
                 </artwork>
       </figure>
	      <t>In this scenario the payload gets encapsuleted into a SATP packet by a unicast host and gets transmitted to one of the anycast routers. It than gets decapsulated by the router. This router makes a routing descision based on the underlying protocol and transmits a new SATP package to one or more unicast hosts depending on the routing descition.</t> 
	    </section>

	    <section title='tunneling from unicast hosts to anycast networks'>
              <figure anchor="open_tunnel_mode">
                 <preamble>An example of SATP used to encrypt data between a unicast host and anycast networks</preamble>
                 <artwork>
                       -------Router -+---- DNS Server
                      /                \ 
                     /                  --- 6to4 Router
                    /
    unicast -------+----------Router --+--- DNS Server
    host            \                   \  
                     \                   --- 6to4 Router
                      \
                       -------Router -+---- DNS Server
                                       \
                                        --- 6to4 Router

  unicast  | encrypted     |  anycast  | plaintext
  tunnel   | communication |  tunnel   | anycast
  endpoint | using SATP    |  endpoint | services

                 </artwork>
       </figure>

	    </section>
      <section title='redundant tunnel connection of 2 networks'>
              <figure anchor="connect_networks">
                 <preamble>An example of SATP used to connect 2 networks</preamble>
                 <artwork>
              Router -----------   ---------------Router
            /                   \ /                     \
    Network - Router ------------x                       Network
       A    \                   / \                     /   B
              Router -----------   ---------------Router

            | packets       |  packets  |  packets      |
 plaintext  | get           |  take a   |  get          | plaintext
 packets    | de/encrypted  |  random   |  de/encrypted | packets
            |de/encapsulated|   path    |de/encapsulated|              

                 </artwork>
       </figure>

               <t>Network A has multible routers, that act as gateway/tunnel endpoint to another network B. This is done to build a redundant encrpted tunnel connection between the two networks. All tunnel endpoints of network A share the same anycast address and all tunnel endpoints of network B share another anycast address. When a packet from network a gets transmitted to network B, it first arrives on one of networks A border routers. Which router is used is determined by network A's internal routing. This router encapsulates the package and sends it to the anycast address of the network B routers. The SATP packet arrives at one of network B's routers and gets decapsulated and routed to it's destination within network B.</t>
      </section>
	</section>
	<section title="Encapsulation">
      <t>SATP does not depend an which lower layer protocols is used, but it's most likely used on top of ip or udp. This section should only discuss some issues on ip and udp in combination with anycasting and tunnels.
      </t>
      <figure anchor="transtort_udp">
        <preamble>Examples of SATP used with different lower layer and payload protocols</preamble>
          <artwork>
    +------+-----+-------------------------------+
    |      |     |      + ---------------+------ |
    | IPv6 | UDP | SATP | Ethernet 802.3 | ... | |
    |      |     |      +----------------+-----+ |
    +------+-----+-------------------------------+

Tunneling of Ethernet over UDP/IPv6

    +------+-----+---------------------------+
    |      |     |      +------+-----+-----+ |
    | IPv4 | UDP | SATP | IPv6 | UDP | RTP | |
    |      |     |      +------+-----+-----+ |
    +------+-----+---------------------------+

Tunneling of IPv6 over UDP/IPv4 with RTP payload

    +------+-------------------------------+
    |      |      + ---------------+------ |
    | IPv6 | SATP | Ethernet 802.3 | ... | |
    |      |      +----------------+-----+ |
    +------+-------------------------------+

Tunneling of Ethernet over IPv6

    +------+---------------------------+
    |      |      +------+-----+-----+ |
    | IPv4 | SATP | IPv6 | UDP | RTP | |
    |      |      +------+-----+-----+ |
    +------+---------------------------+

Tunneling of IPv6 over IPv4 with RTP payload
                 </artwork>
       </figure>
      <t>When using UDP no flow controll or retransmission is done, neigther by UDP nor anytun. The encapsulated protocol HAS TO take care of this tasks if needed. UDP however has a checksum of the complete udp datagram, so a packet gets discarded if there is a biterror in the payload</t>
	  </section>
         <section title="Fragmentation">
         <t>
           The only way of fully supporting fragmentation would be to syncronise fragments between all anycast servers. This is considered to be to much overhead, so there are two non perfect solutions for this problems. Either fragmentation HAS TO be disabled or if not all fragments arrive at the same server the ip datagramm HAS TO be discarded. As routing changes are not expected to occure very frequently, the encapsulated protocol can do a retransmission and all fragments will arrive at the new server.
         </t>
         </section>
   </section>
     <section title="Protocol specification">
       <section title="Header format">
            <figure anchor="prot_header_table">
               <preamble>Protocol Format</preamble>
                 <artwork>
        0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |           sender ID           |         sequence number       | |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |
   | |              ....        payload        ...                   | |
   | |-------------------------------+-------------------------------+ |
   | | padding (OPT) | pad count(OPT)|         payload type          | |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | ~                          MKI (OPTIONAL)                       ~ |
   | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |
   | :                 authentication tag (RECOMMENDED)              : |
   | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |
   |                                                                   |
   +- Encrypted Portion*                      Authenticated Portion ---+
</artwork>
</figure>
<t></t>
       </section>
       <section title="sender ID">
       <t>The sender ID is a 8bit unsigned integer. It HAS TO be unique for every sender sharing the same anycast address</t>
       </section>
       <section title="sequence number">
       <t>The sequenze number is a 24 bit unsigned integer in network byte order. It starts with a random value and is increased by 1 for every sent packet. After the maximum value, it starts over from 0. This overrun causes the ROC to be increased.</t>
       </section>
       <section title="payload">
       <t>A packet of the type payload type (e.g. an IP packet).</t>
       </section>
       <section title="padding (OPTIONAL)">
       <t>Padding of max 255 ocitets.
None of the pre-defined encryption transforms uses any padding; for
   these, the plaintext and encrypted payload sizes match exactly. Transforms are based on transforms of the SRTP protocol and these transforms might use the RTP padding format, so a RTP like padding is supported. If padding field is present, than the padding count field MUST be set to the padding lenght.</t>
       </section>
       <section title="padding count">
       <t>The number of octets of the padding field. This field is optional. It's presents is signaled by the key management and not by this protocol. If this field isn't present, the padding field MUST NOT be present as well.</t>
       </section>
       <section title="payload type field">
         <t>The payload type field defines the payload protocol. ETHER TYPE protocol numerbers are used. <eref target="http://www.iana.org/assignments/ethernet-numbers">See IANA assigned ethernet numbers</eref> . The values 0000-05DC are reserverd and MUST NOT be used. 
            <figure anchor="prot_type_table">
               <preamble>Some examples for protocol types</preamble>
                 <artwork>
HEX
0000 Reserved
.... Reserved
05DC Reserved
0800 Internet IP (IPv4)
6558 transparent ethernet bridging
86DD IPv6
</artwork>
</figure>
</t>
     </section>
    <section title="Encryption">
     <t>Encryption is done in the same way as for <xref target="RFC3711">SRTP</xref>. This section will only discuss some small changes that HAVE TO be made.</t>
    </section>
    </section>
        <appendix title='The appan'></appendix>
    </middle>
    <back>
    <references>
        &rfc2784; 
        &rfc2401;
        &rfc3711;
        &rfc1546;
    </references>
    </back>
    </rfc>
